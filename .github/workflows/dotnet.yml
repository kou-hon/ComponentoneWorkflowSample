name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    permissions:
      actions: read
      contents: read

    steps:
    # 1. 前回実行のartifactを検索してダウンロード
    - name: Download last_run_date artifact from previous workflow
      id: download_artifact
      shell: pwsh
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 取得対象artifact名
        $artifactName = "last_run_date"
        $repo = "${{ github.repository }}"

        # アーティファクト一覧を取得
        $artifacts = gh api "repos/$repo/actions/artifacts" --paginate | ConvertFrom-Json

        # 一致するartifactを探す
        $target = $artifacts.artifacts | Where-Object { $_.name -eq $artifactName } | Sort-Object created_at -Descending | Select-Object -First 1

        if ($null -ne $target) {
          Write-Host "Found artifact: $($target.name)"
          $artifactId = $target.id

          # zipをダウンロードして展開
          gh api "repos/$repo/actions/artifacts/$artifactId/zip" > artifact.zip
          if (Test-Path artifact.zip) {
            Expand-Archive artifact.zip -DestinationPath .
            Write-Host "Artifact downloaded and extracted."
          } else {
            Write-Host "artifact.zip not found. Download failed."
          }
        }
        else {
          Write-Host "No previous artifact found."
        }

    # 2. 今日の日付を取得
    - name: Get today's date
      id: get_date
      shell: pwsh
      run: |
        $date = Get-Date -Format "yyyy-MM-dd"
        echo "date=$date" >> $env:GITHUB_ENV

    # 3. 前回実行日と比較
    - name: Compare dates
      id: compare
      shell: pwsh
      run: |
        if (Test-Path .\last_run_date2.txt) {
          $LAST_RUN_DATE = Get-Content .\last_run_date2.txt
          Write-Host "Last run date: $LAST_RUN_DATE"
        } else {
          $LAST_RUN_DATE = ""
          Write-Host "No last_run_date2.txt found."
        }

        if ($LAST_RUN_DATE -eq $env:date) {
          echo "skip=true" >> $env:GITHUB_ENV
          Write-Host "Already run today. Skipping build."
        } else {
          echo "skip=false" >> $env:GITHUB_ENV
          Write-Host "Not run today. Proceeding with build."
        }

    # 必ず失敗させたい
    - name: Always fail
      shell: pwsh
      if: env.skip == 'false'
      run: |
        Write-Host "This step will always fail."
        exit 1

    # 4. ワークフロー本体
    - name: Checkout
      if: env.skip == 'false'
      uses: actions/checkout@v4

    - name: Setup .NET
      if: env.skip == 'false'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Install GrapeCity License Manager
      if: env.skip == 'false'
      run: dotnet tool install -g GrapeCity.LicenseManagerTool

    - name: gclm setting
      if: env.skip == 'false'
      env:
        LICENSE_KEY: ${{ secrets.COMPONENTONEKEY }}
      run: gclm "4327eaf8-aa02-40a6-b9f6-3d007c039055" -a "$env:LICENSE_KEY"

    - name: Restore dependencies
      if: env.skip == 'false'
      run: dotnet restore

    - name: Build
      if: env.skip == 'false'
      run: dotnet build --no-restore

    - name: Test
      if: env.skip == 'false'
      run: dotnet test --no-build --verbosity normal

    # 5. 今日の日付をartifactとして保存
    - name: Save today's date as artifact
      if: env.skip == 'false'
      shell: pwsh
      run: |
        $env:date | Out-File -Encoding UTF8 -NoNewline last_run_date2.txt

    - name: Upload last_run_date2 artifact
      if: env.skip == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: last_run_date2
        path: last_run_date2.txt
        retention-days: 3

    # 6. クリーンアップ
    - name: Clean up
      if: always() && env.skip != 'true'
      run: gclm "4327eaf8-aa02-40a6-b9f6-3d007c039055" -d